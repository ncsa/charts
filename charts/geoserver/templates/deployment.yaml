apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "geoserver.fullname" . }}
  labels:
    {{- include "geoserver.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "geoserver.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "geoserver.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "geoserver.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.plugins.keycloak.enabled }}
        - name: install-keycloak-plugin
          image: busybox
          command:
            - sh
            - -c
            - |
              echo "Downloading and installing Keycloak plugin"
              wget -O /tmp/keycloak-plugin.zip {{ .Values.plugins.keycloak.downloadUrl }}
              unzip /tmp/keycloak-plugin.zip -d /tmp/keycloak-plugin
              find /tmp/keycloak-plugin -name '*.jar' -exec cp -n {} {{ .Values.plugins.keycloak.destinationPath }} \;
          volumeMounts:
            - name: geoserver-lib
              mountPath: /tmp/keycloak-plugin
            - name: geoserver-lib
              mountPath: {{ .Values.plugins.keycloak.destinationPath }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: INSTALL_EXTENSIONS
              value: {{ .Values.extension.install | quote }}
            - name: STABLE_EXTENSIONS
              value: {{ .Values.extension.stableExtension | quote }}
            - name: CORS_ENABLED
              value: {{ .Values.cors.enabled | quote }}
            - name: GEOSERVER_CSRF_WHITELIST
              value: {{ .Values.whitelist | quote }}
            - name: SKIP_DEMO_DATA
              value: {{ .Values.demoData.skip | quote }}
            - name: EXTRA_JAVA_OPTS
              value: {{ .Values.envs.extraJavaOpts | quote }}
            - name: GEOSERVER_ADMIN_USER
              value: admin
            - name: GEOSERVER_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.auth.existingSecret }}
                  name: {{ .Values.auth.existingSecret }}
                  key: {{ .Values.auth.passwordKey | default "geoserver_admin_password" }}
                  {{- else }}
                  name: {{ include "geoserver.fullname" . }}
                  key: geoserver_admin_password
                  {{- end }}
            {{- if .Values.plugins.keycloak.enabled }}
            - name: KEYCLOAK_AUTH_SERVER_URL
              value: "https://myserver.com/auth/realms/your-realm"
            - name: KEYCLOAK_REALM
              value: "your-realm"
            - name: KEYCLOAK_RESOURCE
              value: "geoserver"
            - name: KEYCLOAK_CREDENTIALS_SECRET
              value: "your-client-secret"
            - name: KEYCLOAK_DISABLE_TRUST_MANAGER
              value: "true"
            {{- end }}
          ports:
            - name: geoserver
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: {{ include "geoserver.fullname" . }}
              mountPath: /opt/geoserver_data
            - name: geoserver-lib
              mountPath: {{ .Values.plugins.keycloak.destinationPath }}
          startupProbe:
            httpGet:
              path: /geoserver/web
              port: geoserver
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /geoserver/web
              port: geoserver
          readinessProbe:
            httpGet:
              path: /geoserver/web
              port: geoserver
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: {{ include "geoserver.fullname" . }}
          persistentVolumeClaim:
            {{- if .Values.persistence.existingClaim }}
            claimName: {{ .Values.persistence.existingClaim }}
            {{- else }}
            claimName: {{ include "geoserver.fullname" . }}
            {{- end }}
        - name: geoserver-lib
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
